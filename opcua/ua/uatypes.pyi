"""
typing stub file
"""

from enum import Enum, IntEnum
from datetime import datetime
import uuid

from typing import Any, Optional, Union, Type

FrozenClass = object

class ObjectIds: ...

class ValueRank(IntEnum):
    ScalarOrOneDimension: int = ...
    Any: int = ...
    Scalar: int = ...
    OneOrMoreDimensions: int = ...
    OneDimension: int = ...
    TwoDimensions: int = ...
    ThreeDimensions: int = ...
    FourDimensions: int = ...

class AccessLevel:
    CurrentRead: int = ...
    CurrentWrite: int = ...
    HistoryRead: int = ...
    HistoryWrite: int = ...
    SemanticChange: int = ...
    StatusWrite: int = ...
    TimestampWrite: int = ...

class WriteMask:
    AccessLevel: int = ...
    ArrayDimensions: int = ...
    BrowseName: int = ...
    ContainsNoLoops: int = ...
    DataType: int = ...
    Description: int = ...
    DisplayName: int = ...
    EventNotifier: int = ...
    Executable: int = ...
    Historizing: int = ...
    InverseName: int = ...
    IsAbstract: int = ...
    MinimumSamplingInterval: int = ...
    NodeClass: int = ...
    NodeId: int = ...
    Symmetric: int = ...
    UserAccessLevel: int = ...
    UserExecutable: int = ...
    UserWriteMask: int = ...
    ValueRank: int = ...
    WriteMask: int = ...
    ValueForVariableType: int = ...

class EventNotifier:
    SubscribeToEvents: int = ...
    HistoryRead: int = ...
    HistoryWrite: int = ...

class StatusCode:
    value: int = ...
    def __init__(self, value: int = ...) -> None: ...
    def check(self) -> None: ...
    def is_good(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def doc(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

class NodeIdType(IntEnum):
    TwoByte: int = ...
    FourByte: int = ...
    Numeric: int = ...
    String: int = ...
    Guid: int = ...
    ByteString: int = ...

_NodeIdType = NodeIdType  # prevent conflict with class attr
_Identifier = Union[None, int, str, bytes, uuid.UUID]

class NodeId:
    Identifier: _Identifier = ...
    NamespaceIndex: int = ...
    NodeIdType: _NodeIdType = ...
    NamespaceUri: str = ...
    ServerIndex: int = ...
    def __init__(
        self,
        identifier: _Identifier = None,
        namespaceidx: int = 0,
        nodeidtype: Optional[_NodeIdType] = None,
    ) -> None: ...
    def __eq__(self, node: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def is_null(self) -> bool: ...
    def has_null_identifier(self) -> bool: ...
    @staticmethod
    def from_string(string: Any) -> NodeId: ...
    def to_string(self) -> str: ...

class TwoByteNodeId(NodeId): ...
class FourByteNodeId(NodeId): ...
class NumericNodeId(NodeId): ...
class ByteStringNodeId(NodeId): ...
class GuidNodeId(NodeId): ...
class StringNodeId(NodeId): ...

ExpandedNodeId = NodeId

class QualifiedName:
    NamespaceIndex: int = ...
    Name: Any = ...
    def __init__(self, name: Optional[Any] = ..., namespaceidx: int = ...) -> None: ...
    def to_string(self) -> str: ...
    @staticmethod
    def from_string(string: Any) -> QualifiedName: ...
    def __eq__(self, bname: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...

class LocalizedText:
    ua_switches: Any = ...
    ua_types: Any = ...
    Encoding: int = ...
    Locale: Any = ...
    def __init__(self, text: Optional[str] = None):
        self.Encoding: int
        self._text: Optional[str]
        self.Locale = Any
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, text: str) -> None: ...
    def to_string(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

class VariantType(Enum):
    Null: int = ...
    Boolean: int = ...
    SByte: int = ...
    Byte: int = ...
    Int16: int = ...
    UInt16: int = ...
    Int32: int = ...
    UInt32: int = ...
    Int64: int = ...
    UInt64: int = ...
    Float: int = ...
    Double: int = ...
    String: int = ...
    DateTime: int = ...
    Guid: int = ...
    ByteString: int = ...
    XmlElement: int = ...
    NodeId: int = ...
    ExpandedNodeId: int = ...
    StatusCode: int = ...
    QualifiedName: int = ...
    LocalizedText: int = ...
    ExtensionObject: int = ...
    DataValue: int = ...
    Variant: int = ...
    DiagnosticInfo: int = ...

class Variant:
    def __init__(
        self,
        value: Optional[Any] = ...,
        varianttype: Optional[Any] = ...,
        dimensions: Optional[Any] = ...,
        is_array: Optional[bool] = ...,
    ) -> None: ...
    @property
    def Value(self) -> Any: ...
    @Value.setter
    def Value(self, value: Any) -> None: ...
    @property
    def VariantType(self) -> VariantType: ...
    @VariantType.setter
    def VariantType(self, variantType: VariantType) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

Variant().VariantType = VariantType.LocalizedText

# need to define an internal alias due to attr with identical name
_StatusCode = StatusCode

class DataValue:
    Encoding: int = ...
    Value: Variant = ...
    StatusCode: StatusCode = ...
    SourceTimestamp: datetime = ...
    SourcePicoseconds: int = ...
    ServerTimestamp: datetime = ...
    ServerPicoseconds: int = ...
    def __init__(
        self, variant: Optional[Any] = ..., status: Optional[_StatusCode] = ...,
    ) -> None: ...

class SecurityPolicyType(Enum):
    NoSecurity: int = ...
    Basic128Rsa15_Sign: int = ...
    Basic128Rsa15_SignAndEncrypt: int = ...
    Basic256_Sign: int = ...
    Basic256_SignAndEncrypt: int = ...
    Basic256Sha256_Sign: int = ...
    Basic256Sha256_SignAndEncrypt: int = ...
